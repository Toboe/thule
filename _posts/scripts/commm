Title: list the top 15 folders by decreasing size in MB
$ du -xB M --max-depth=2 /var | sort -rn | head -n 15
Title: prevent large files from being cached in memory (backups!)
$ nocache <>I/O-heavy-command>

We all know...
nice -n19

for low CPU priority.
ionice -c3

for low I/O priority.

nocache can be useful in related scenarios, when we operate on very large files
just a single time, e.g. a backup job. It advises the kernel that no caching is
required for the involved files, so our current file cache is not erased, 
potentially decreasing performance on other, more typical file I/O, e.g. on a 
desktop.
Title: Recursively search and replace old with new string, inside every instance of filename.ext

$ find . -type f -name filename.exe -exec sed -i "s/oldstring/oldstring/g" {} 
+;

This is a slightly modified version of 
http://www.commandlinefu.com/commands/view/4283/recursive-search-and-replace-old-with-new-string-inside-files[1]
(which did not work due to incorrect syntax) with the added option to sed 
inside only files named filename.ext
Title: get a random 0/1, use it for on/off, yes/no
$ echo $[RANDOM % 2]
use it to add a random boolean switch to your script
Title: get a random number in bash
$ echo $[RANDOM % 100] # range 0-99
Title: Send murmurd log lines to syslog

$ nohup tail /var/log/murmur.log | perl -ne '/^<>.>[0-9:. -]{24}(\d+ => 
)?(.*)/; $pid=`pgrep -u murmur murmurd | head`; chomp $pid; `logger -p info -t 
"murmurd[$pid]" \\"$2\\"`;' &

Sends log lines from murmur's (the mumble server's) logfile to syslog.

Title: Diff 2 file struct - Useful for branch diff and jars diff(uncompressed)

$ diff <>(cd A; find -type f|xargs md5sum ) <>(cd B; find -type f | xargs 
md5sum )

This is usefull to diff 2 paths in branches of software, or in different 
versions of a same zip file. So you can get the real file diff.

Title: Russian Roulette
$ [ $[ $RANDOM % 6 ] == 0 ] && rm -rf / || echo *Click*
WARNING! If you are not feeling lucky, don't run this command!
Title: Fetch the current human population of Earth

$ curl --silent http://www.census.gov/population/international/ | grep 
wclocknum | sed -r 's@^.*>([0-9,]+)<>.*$@\1@'

Title: Use curl with a local SOCKS5 proxy (e.g. Tor)

$ turl(){ curl --socks5-hostname localhost:9050 $@ ; }

Routes curl input through a local SOCKS5 proxy; in this case, anonymizes curl 
activity via The Onion Router (Tor) proxy running locally.

Title: AES file encryption with openssl
$ openssl aes-256-cbc -salt -in secrets.txt -out secrets.txt.enc
To decrypt: openssl aes-256-cbc -d -in secrets.txt.enc -out secrets.txt.new
Optional parameter -a makes output base64 encoded, can be viewed in text editor
or pasted in email
Title: check your up to date delicious links.
$ curl -k https://Username:Password@api.del.icio.us/v1/posts/all?red=api | 
xml2| \grep '@href' | cut -d\= -f 2- | sort | uniq | linkche cker --stdin 
--complete -v -t 50 -F blacklist

This commands queries the delicious api then runs the xml through xml2, grabs 
the urls cuts out the first two columns, passes through uniq to remove 
duplicates if any, and then goes into linkchecker who checks the links. the 
links go the blacklist in ~/.linkchecker/blacklist. please see the manual pages
for further info peeps. I took me a few days to figure this one out. I how you 
enjoy it. Also don't run these api more then once a few seconds you can get 
banned by delicious see their site for info.
Title: DOS attack
$ hping3 --rand-source -p 80 -S --flood Victim_ip
Perform a DOS attack from Linux using hping3 
DOS=Denial-of-Service

#!/bin/bash
wget -q -O - checkip.dyndns.org | sed -e 's/[^[:digit:]\|.]//g'Title: nmap
$ db_nmap -T4 -A -v -v ( TARGET )
$ nmap --script dhcp-discover 192.168.244.0/24
wery usebl

$ !!; while [ $? -ne 0 ]; do !!; done
Executes the previously-run command constantly until it returns 0 (success). 
Title: Running applications require X in ssh
$ ssh -X -l user 192.168.1.25
One time you logged in, you can prove these method just writing "firefox".
Title: Sharing a file through http 80 port:
$ nc -w 5 -v -l -p 80 <> file.ext

$ ffmpeg -r 12 -i img%03d.jpg -sameq -s hd720 -vcodec libx264 -crf 25 
OUTPUT.MP4
